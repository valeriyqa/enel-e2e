// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestAutomationFramework.Features.B2B_UI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("B2B Load Balancing feature")]
    public partial class B2BLoadBalancingFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LoadBalancing.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "B2B Load Balancing feature", "\tIn order to verify Load Balancing feature functionality\r\n\twe run next scenarios", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_01 - Set load balancing for location")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_01_SetLoadBalancingForLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_01 - Set load balancing for location", null, new string[] {
                        "b2b",
                        "web"});
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_02 - Check two hints in Load balancing tab (next to “Load B" +
            "alancing”, and “Allowed max power (kW) for this location”)")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_02_CheckTwoHintsInLoadBalancingTabNextToLoadBalancingAndAllowedMaxPowerKWForThisLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_02 - Check two hints in Load balancing tab (next to “Load B" +
                    "alancing”, and “Allowed max power (kW) for this location”)", null, new string[] {
                        "b2b",
                        "web"});
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_03 - Device with load balancing assigned should be displayi" +
            "ng with load balancing icon.")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_03_DeviceWithLoadBalancingAssignedShouldBeDisplayingWithLoadBalancingIcon_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_03 - Device with load balancing assigned should be displayi" +
                    "ng with load balancing icon.", null, new string[] {
                        "b2b",
                        "web"});
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_04 - User cannot type anything except digits and dot in “Al" +
            "lowed max power (kW) for this location” field")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_04_UserCannotTypeAnythingExceptDigitsAndDotInAllowedMaxPowerKWForThisLocationField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_04 - User cannot type anything except digits and dot in “Al" +
                    "lowed max power (kW) for this location” field", null, new string[] {
                        "b2b",
                        "web"});
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_05 - Check that error “Required” under “Allowed max power (" +
            "kW) for this location” is appears")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_05_CheckThatErrorRequiredUnderAllowedMaxPowerKWForThisLocationIsAppears()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_05 - Check that error “Required” under “Allowed max power (" +
                    "kW) for this location” is appears", null, new string[] {
                        "b2b",
                        "web"});
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_06 - Check autocorrection if user enter value that less 2 k" +
            "wh")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_06_CheckAutocorrectionIfUserEnterValueThatLess2Kwh()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_06 - Check autocorrection if user enter value that less 2 k" +
                    "wh", null, new string[] {
                        "b2b",
                        "web"});
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_07 - Check warning when user set 2 Kwh in Allowed power tab" +
            " and more than two devices connected to this location")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_07_CheckWarningWhenUserSet2KwhInAllowedPowerTabAndMoreThanTwoDevicesConnectedToThisLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_07 - Check warning when user set 2 Kwh in Allowed power tab" +
                    " and more than two devices connected to this location", null, new string[] {
                        "b2b",
                        "web"});
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_08 - Verify that only 4 digits are acceptable to enter in A" +
            "llowed power field")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_08_VerifyThatOnly4DigitsAreAcceptableToEnterInAllowedPowerField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_08 - Verify that only 4 digits are acceptable to enter in A" +
                    "llowed power field", null, new string[] {
                        "b2b",
                        "web"});
#line 74
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_09 - User must see that device is in load group in device s" +
            "ettings")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_09_UserMustSeeThatDeviceIsInLoadGroupInDeviceSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_09 - User must see that device is in load group in device s" +
                    "ettings", null, new string[] {
                        "b2b",
                        "web"});
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_10 - Check notification when energy hits the maximum load b" +
            "alancing value - Not developed yet")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_10_CheckNotificationWhenEnergyHitsTheMaximumLoadBalancingValue_NotDevelopedYet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_10 - Check notification when energy hits the maximum load b" +
                    "alancing value - Not developed yet", null, new string[] {
                        "b2b",
                        "web"});
#line 88
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_11 - Test LB with two devices (free and not free rate)")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_11_TestLBWithTwoDevicesFreeAndNotFreeRate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_11 - Test LB with two devices (free and not free rate)", null, new string[] {
                        "b2b",
                        "web"});
#line 98
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_12 - Test LB with Sublocation")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_12_TestLBWithSublocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_12 - Test LB with Sublocation", null, new string[] {
                        "b2b",
                        "web"});
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_13 - Case when device is can\'t start charging because of lo" +
            "ad balancing restrictions")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_13_CaseWhenDeviceIsCantStartChargingBecauseOfLoadBalancingRestrictions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_13 - Case when device is can\'t start charging because of lo" +
                    "ad balancing restrictions", null, new string[] {
                        "b2b",
                        "web"});
#line 121
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_14 - Link device from one LB group to another")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_14_LinkDeviceFromOneLBGroupToAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_14 - Link device from one LB group to another", null, new string[] {
                        "b2b",
                        "web"});
#line 130
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_15 - Plugged in device must reserve 8A of Allowed Power")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_15_PluggedInDeviceMustReserve8AOfAllowedPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_15 - Plugged in device must reserve 8A of Allowed Power", null, new string[] {
                        "b2b",
                        "web"});
#line 145
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B2B_Web_LoadBalancing_16 - Set LB fo sublocation")]
        [NUnit.Framework.CategoryAttribute("b2b")]
        [NUnit.Framework.CategoryAttribute("web")]
        public virtual void B2B_Web_LoadBalancing_16_SetLBFoSublocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B2B_Web_LoadBalancing_16 - Set LB fo sublocation", null, new string[] {
                        "b2b",
                        "web"});
#line 164
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

