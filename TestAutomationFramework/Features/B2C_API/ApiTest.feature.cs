// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestAutomationFramework.Features.B2C_API
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("API")]
    public partial class APIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ApiTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "API", "\tIn order to test API functionality we run next scenarios", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basic test for requests without parameters")]
        [NUnit.Framework.CategoryAttribute("api")]
        [NUnit.Framework.TestCaseAttribute("get_car_models", null)]
        [NUnit.Framework.TestCaseAttribute("get_server_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_timezones", null)]
        public virtual void BasicTestForRequestsWithoutParameters(string restAPI, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic test for requests without parameters", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.When(string.Format("I send \"{0}\" request", restAPI), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then("response should be valid to schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
 testRunner.And("property \"success\" should be equal to \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add/delete program signup info")]
        [NUnit.Framework.CategoryAttribute("api")]
        public virtual void AddDeleteProgramSignupInfo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add/delete program signup info", new string[] {
                        "api"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("program signup info is not set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("I send \"set_program_signup_info\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.And("I send \"get_program_signup_info\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.Then("response should be valid to schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "Value"});
            table1.AddRow(new string[] {
                        "success",
                        "1"});
            table1.AddRow(new string[] {
                        "step1.first_name",
                        "FirstName"});
            table1.AddRow(new string[] {
                        "step1.last_name",
                        "LastName"});
            table1.AddRow(new string[] {
                        "step1.bill_first_name",
                        "Billfirstname"});
            table1.AddRow(new string[] {
                        "step1.bill_last_name",
                        "Billlastname"});
            table1.AddRow(new string[] {
                        "step1.email",
                        "testuser@example.com"});
            table1.AddRow(new string[] {
                        "step1.phone_number",
                        "123-456-78-90"});
            table1.AddRow(new string[] {
                        "step1.address",
                        "Test home address"});
            table1.AddRow(new string[] {
                        "step1.city",
                        "TestCity"});
            table1.AddRow(new string[] {
                        "step1.state",
                        "California"});
            table1.AddRow(new string[] {
                        "step1.service_address",
                        "Test service address"});
            table1.AddRow(new string[] {
                        "step1.service_city",
                        "San Carol"});
#line 21
 testRunner.And("property \"<PropertyName>\" should be equal to \"<Value>\"", ((string)(null)), table1, "And ");
#line 35
 testRunner.And("property \"step1.post_code\" should be equal to \"95128\" string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("I send \"delete_program_signup_info\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("I send \"get_program_signup_info\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("response should be valid to schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "Value"});
            table2.AddRow(new string[] {
                        "success",
                        "1"});
            table2.AddRow(new string[] {
                        "step1.first_name",
                        "Oleksii"});
            table2.AddRow(new string[] {
                        "step1.last_name",
                        "Khabarov"});
            table2.AddRow(new string[] {
                        "step1.bill_first_name",
                        ""});
            table2.AddRow(new string[] {
                        "step1.name_is_different_in_bill",
                        ""});
            table2.AddRow(new string[] {
                        "step1.email",
                        "oleksii.khabarov@emotorwerks.com"});
            table2.AddRow(new string[] {
                        "step1.phone_number",
                        ""});
            table2.AddRow(new string[] {
                        "step1.address",
                        "null"});
            table2.AddRow(new string[] {
                        "step1.city",
                        "null"});
            table2.AddRow(new string[] {
                        "step1.state",
                        "null"});
            table2.AddRow(new string[] {
                        "step1.service_address",
                        ""});
            table2.AddRow(new string[] {
                        "step1.service_city",
                        ""});
#line 39
 testRunner.And("property \"<PropertyName>\" should be equal to \"<Value>\"", ((string)(null)), table2, "And ");
#line 53
 testRunner.And("property \"step1.post_code\" should be equal to \"94070\" string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Incorrect token test")]
        [NUnit.Framework.CategoryAttribute("api")]
        [NUnit.Framework.TestCaseAttribute("add_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("add_car", null)]
        [NUnit.Framework.TestCaseAttribute("delete_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("delete_car", null)]
        [NUnit.Framework.TestCaseAttribute("delete_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_history", null)]
        [NUnit.Framework.TestCaseAttribute("get_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_notifications", null)]
        [NUnit.Framework.TestCaseAttribute("get_plot", null)]
        [NUnit.Framework.TestCaseAttribute("get_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_schedule", null)]
        [NUnit.Framework.TestCaseAttribute("get_share_pin", null)]
        [NUnit.Framework.TestCaseAttribute("get_state", null)]
        [NUnit.Framework.TestCaseAttribute("get_utilitybill_url", null)]
        [NUnit.Framework.TestCaseAttribute("select_car", null)]
        [NUnit.Framework.TestCaseAttribute("set_charging_time", null)]
        [NUnit.Framework.TestCaseAttribute("set_garage", null)]
        [NUnit.Framework.TestCaseAttribute("set_info", null)]
        [NUnit.Framework.TestCaseAttribute("set_limit", null)]
        [NUnit.Framework.TestCaseAttribute("set_notifications", null)]
        [NUnit.Framework.TestCaseAttribute("set_override", null)]
        [NUnit.Framework.TestCaseAttribute("set_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("set_schedule", null)]
        [NUnit.Framework.TestCaseAttribute("update_car", null)]
        public virtual void IncorrectTokenTest(string restAPI, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect token test", @__tags);
#line 56
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table3.AddRow(new string[] {
                        "token",
                        "incorrect_token"});
#line 57
 testRunner.When(string.Format("I send \"{0}\" request with next \"<Property>\" \"<Value>\"", restAPI), ((string)(null)), table3, "When ");
#line 60
 testRunner.Then("response should be valid to schema \"error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
 testRunner.And("property \"success\" should be equal to \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("property \"error_code\" should be equal to \"1007\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("property \"error_message\" should be equal to \"Invalid session token. Please reente" +
                    "r password.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing token test")]
        [NUnit.Framework.CategoryAttribute("api")]
        [NUnit.Framework.TestCaseAttribute("add_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("add_car", null)]
        [NUnit.Framework.TestCaseAttribute("delete_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("delete_car", null)]
        [NUnit.Framework.TestCaseAttribute("delete_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_history", null)]
        [NUnit.Framework.TestCaseAttribute("get_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_notifications", null)]
        [NUnit.Framework.TestCaseAttribute("get_plot", null)]
        [NUnit.Framework.TestCaseAttribute("get_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_schedule", null)]
        [NUnit.Framework.TestCaseAttribute("get_share_pin", null)]
        [NUnit.Framework.TestCaseAttribute("get_state", null)]
        [NUnit.Framework.TestCaseAttribute("get_utilitybill_url", null)]
        [NUnit.Framework.TestCaseAttribute("select_car", null)]
        [NUnit.Framework.TestCaseAttribute("set_charging_time", null)]
        [NUnit.Framework.TestCaseAttribute("set_garage", null)]
        [NUnit.Framework.TestCaseAttribute("set_info", null)]
        [NUnit.Framework.TestCaseAttribute("set_limit", null)]
        [NUnit.Framework.TestCaseAttribute("set_notifications", null)]
        [NUnit.Framework.TestCaseAttribute("set_override", null)]
        [NUnit.Framework.TestCaseAttribute("set_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("set_schedule", null)]
        [NUnit.Framework.TestCaseAttribute("update_car", null)]
        public virtual void MissingTokenTest(string restAPI, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing token test", @__tags);
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.When(string.Format("I send \"{0}\" request with next \"token\" \"null\"", restAPI), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then("response should be valid to schema \"error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
 testRunner.And("property \"success\" should be equal to \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("property \"error_code\" should be equal to \"1007\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("property \"error_message\" should be equal to \"Invalid session token. Please reente" +
                    "r password.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Incorrect account token test")]
        [NUnit.Framework.CategoryAttribute("api")]
        [NUnit.Framework.TestCaseAttribute("add_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("add_unit", null)]
        [NUnit.Framework.TestCaseAttribute("delete_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("delete_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_account_units", null)]
        [NUnit.Framework.TestCaseAttribute("get_program_signup_info", null)]
        [NUnit.Framework.TestCaseAttribute("get_share_pin", null)]
        [NUnit.Framework.TestCaseAttribute("get_utilitybill_url", null)]
        [NUnit.Framework.TestCaseAttribute("register_pushes", null)]
        public virtual void IncorrectAccountTokenTest(string restAPI, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect account token test", @__tags);
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
 testRunner.When(string.Format("I send \"{0}\" request with next \"account_token\" \"incorrect_token\"", restAPI), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("response should be valid to schema \"error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
 testRunner.And("property \"success\" should be equal to \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("property \"error_code\" should be equal to \"1009\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("property \"error_message\" should be equal to \"User have not permissions to unit. C" +
                    "heck account token.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Missing account token test")]
        [NUnit.Framework.CategoryAttribute("api")]
        [NUnit.Framework.TestCaseAttribute("add_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("delete_account_unit", null)]
        [NUnit.Framework.TestCaseAttribute("get_account_units", null)]
        [NUnit.Framework.TestCaseAttribute("register_pushes", null)]
        public virtual void MissingAccountTokenTest(string restAPI, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "api"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Missing account token test", @__tags);
#line 162
this.ScenarioSetup(scenarioInfo);
#line 163
 testRunner.When(string.Format("I send \"{0}\" request with next \"account_token\" \"null\"", restAPI), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("response should be valid to schema \"error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 165
 testRunner.And("property \"success\" should be equal to \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.And("property \"error_code\" should be equal to \"1009\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And("property \"error_message\" should be equal to \"Missing Account token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add/delete new unit to the system")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void AddDeleteNewUnitToTheSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add/delete new unit to the system", new string[] {
                        "ignore"});
#line 198
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add/delete car to the system")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void AddDeleteCarToTheSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add/delete car to the system", new string[] {
                        "ignore"});
#line 201
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add/delete Utility bill")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void AddDeleteUtilityBill()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add/delete Utility bill", new string[] {
                        "ignore"});
#line 204
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ownership operations")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void OwnershipOperations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ownership operations", new string[] {
                        "ignore"});
#line 207
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Share device operations")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void ShareDeviceOperations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Share device operations", new string[] {
                        "ignore"});
#line 210
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Logout from the system")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public virtual void LogoutFromTheSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Logout from the system", new string[] {
                        "ignore"});
#line 213
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
