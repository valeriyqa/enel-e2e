{
	"info": {
		"_postman_id": "3c527fbe-6b2e-4e90-ab75-a37c5b93fbf1",
		"name": "B2B_Beta_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Token",
			"item": [
				{
					"name": "Token Reseller Beta2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79804596-356d-4c08-b315-80b1d8eff0dd",
								"exec": [
									"var data = JSON.parse(responseBody);   ",
									"postman.setEnvironmentVariable(\"bearer-token-reseller\", data.access_token);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application;x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bW9iaWxlYXBwY2xpZW50Ojk5QjI0Mzg1LTk0N0QtNDBDQS04RTIwLTY2NjMyMjQ1NUFERA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&username=6dofik@gmail.com&password=emotorwerks&scope=api%20offline_access%20openid%20profile%20roles"
						},
						"url": {
							"raw": "https://v2-beta2-identityserver.azurewebsites.net/identity/connect/token",
							"protocol": "https",
							"host": [
								"v2-beta2-identityserver",
								"azurewebsites",
								"net"
							],
							"path": [
								"identity",
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token Client Beta2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79804596-356d-4c08-b315-80b1d8eff0dd",
								"exec": [
									"var data = JSON.parse(responseBody);   ",
									"postman.setEnvironmentVariable(\"bearer-token\", data.access_token);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application;x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bW9iaWxlYXBwY2xpZW50Ojk5QjI0Mzg1LTk0N0QtNDBDQS04RTIwLTY2NjMyMjQ1NUFERA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&username=6dofik%2B911@gmail.com&password=emotorwerks&scope=api%20offline_access%20openid%20profile%20roles\n"
						},
						"url": {
							"raw": "https://v2-beta2-identityserver.azurewebsites.net/identity/connect/token",
							"protocol": "https",
							"host": [
								"v2-beta2-identityserver",
								"azurewebsites",
								"net"
							],
							"path": [
								"identity",
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locations",
			"item": [
				{
					"name": "createNewLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dab20f5b-a05d-4c3b-a0c1-1b2cfb2cf705",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									" ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Response has new_location_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); //true или false (метод)",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_location_id\", _str);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8723cbc4-34dd-4d23-bfd2-dcfbe20010e3",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestLocation+'+getRandomInt(1, 10000)",
									"",
									"pm.environment.set(\"random_location1\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_location1}}\",\r\n  \"address\": {\r\n    \"address\": \"816 University Street\",\r\n    \"city\": \"Marquette\",\r\n    \"state\": \"MI\",\r\n    \"zip\": \"49855\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  }\r\n}\r\n\r\n "
						},
						"url": {
							"raw": "{{url}}locations",
							"host": [
								"{{url}}locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewSubLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "408fea4a-aa15-4bd8-9e47-48b47e32c265",
								"type": "text/javascript",
								"exec": [
									" var jsonData = JSON.parse(responseBody);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Response has new_sublocation_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); ",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_sublocation_id\", _str);",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a163419-8a8b-4310-9fc0-44ae8e40ed89",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestSubLocation+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_sublocation1\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_sublocation1}}\",\r\n  \"address\": {\r\n    \"address\": \"817 University Street\",\r\n    \"city\": \"Marquette\",\r\n    \"state\": \"MI\",\r\n    \"zip\": \"49855\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  },\r\n  \"parentId\": \"{{new_location_id}}\" \r\n  \r\n}\r\n "
						},
						"url": {
							"raw": "{{url}}locations",
							"host": [
								"{{url}}locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "clientLocationLookup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7cd285-5f68-40ec-ada2-b86493e6b39d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": ",
									"      {",
									"        \"type\": \"object\",",
									"        \"properties\": ",
									"        {",
									"          \"id\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"name\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/lookup",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"lookup"
							]
						}
					},
					"response": []
				},
				{
					"name": "detailsOfLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "134a4273-1d06-41b7-bd99-82c0926269d0",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"    \"items\": ",
									"    {",
									"        \"type\":\"object\",",
									"        \"properties\":",
									"        {",
									"            \"id\":",
									"            {",
									"                \"type\":\"string\"",
									"            },",
									"            \"name\":",
									"            {",
									"                \"type\":\"string\"",
									"            },",
									"            \"address\":",
									"            {",
									"                \"type\":\"object\",",
									"                \"properties\":",
									"                {",
									"                    \"address\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"city\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"state\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"zip\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"timeZone\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                    \"type\":\"object\",",
									"                    \"properties\":",
									"                    {",
									"                        \"isRoot\":",
									"                        {",
									"                            \"type\":\"boolean\"",
									"                        },",
									"                        \"parentId\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"parentLocation\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"\"required\": [",
									"                \"id\", ",
									"                \"name\",",
									"                \"address\",",
									"                \"address\",",
									"                \"city\",",
									"                \"state\",",
									"                \"zip\",",
									"                \"timeZone\",",
									"                \"isRoot\",",
									"                \"parentId\",",
									"                \"parentLocation\"",
									"            ]",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"address field is present\"]= responseBody.has(\"address\");",
									"tests[\"city field is present\"]= responseBody.has(\"city\");",
									"tests[\"state field is present\"]= responseBody.has(\"state\");",
									"tests[\"zip field is present\"]= responseBody.has(\"zip\");",
									"tests[\"isRoot field is present\"]= responseBody.has(\"isRoot\");",
									"tests[\"parentId field is present\"]= responseBody.has(\"parentId\");",
									"tests[\"parentLocation field is present\"]= responseBody.has(\"parentLocation\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "locationsTree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4867f62f-158c-4eea-9b26-18eb03f85ff1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"array\",",
									"  \"data\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"devicesCount\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"inUseDevicesCount\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"id\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"address\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"isLocation\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"type\":\"array\",",
									"        \"children\": ",
									"            {",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"                {",
									"                \"devicesCount\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                    \"data\": ",
									"                    {",
									"                        \"type\":\"object\",",
									"                        \"properties\":",
									"                        {",
									"                            \"data\": ",
									"                            {",
									"                            \"type\":\"object\",",
									"                            \"properties\":",
									"                                {",
									"                                    \"status\": ",
									"                                    {",
									"                                        \"type\":\"object\",",
									"                                        \"properties\":",
									"                                        {",
									"                                            \"id\":",
									"                                            {",
									"                                                \"type\":\"string\"",
									"                                            },",
									"                                            \"name\":",
									"                                            {",
									"                                                \"type\":\"string\"",
									"                                            },",
									"                                            \"inUse\":",
									"                                            {",
									"                                                \"type\":\"string\"",
									"                                            },",
									"                                            \"type\":\"object\",",
									"                                                \"properties\": {",
									"                                                    \"reserved\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"physicalId\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"id\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"name\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"address\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"isLocation\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"type\":\"object\",",
									"                                                    \"properties\":",
									"                                                        {",
									"                                                            \"children\":",
									"                                                            {",
									"                                                                \"type\":\"string\"",
									"                                                            },",
									"          \"required\": [",
									"                \"data\", ",
									"                \"devicesCount\",",
									"                \"inUseDevicesCount\",",
									"                \"id\",",
									"                \"name\",",
									"                \"address\",",
									"                \"isLocation\",",
									"                \"children\",",
									"                \"data\",",
									"                \"status\",",
									"                \"id\",",
									"                \"name\",",
									"                \"inUse\",",
									"                \"reserved\",",
									"                \"physicalId\",",
									"                \"id\",",
									"                \"name\",",
									"                \"address\",",
									"                \"isLocation\",",
									"                \"children\"",
									"            ]",
									"                                                }",
									"                                            }   ",
									"                                        }   ",
									"                                    }   ",
									"                                }   ",
									"                            }   ",
									"                        }   ",
									"                    }   ",
									"                }   ",
									"            }                                                ",
									"        }                                                  ",
									"    }",
									"};",
									"",
									"    ",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"data field is present\"]= responseBody.has(\"data\");",
									"tests[\"devicesCount field is present\"]= responseBody.has(\"devicesCount\");",
									"tests[\"inUseDevicesCount field is present\"]= responseBody.has(\"inUseDevicesCount\");",
									"tests[\"id field is present\"]= responseBody.has(\"id\");",
									"tests[\"name field is present\"]= responseBody.has(\"name\");",
									"tests[\"address field is present\"]= responseBody.has(\"address\");",
									"tests[\"isLocation field is present\"]= responseBody.has(\"isLocation\");",
									"tests[\"children field is present\"]= responseBody.has(\"children\");",
									"tests[\"inUse field is present\"]= responseBody.has(\"inUse\");",
									"tests[\"isLocation field is present\"]= responseBody.has(\"isLocation\");",
									"",
									"",
									"",
									"",
									"    ",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/tree/extended",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"tree",
								"extended"
							]
						}
					},
					"response": []
				},
				{
					"name": "locationDevices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f78035c4-de00-4277-86a5-00b38a2a0ebb",
								"type": "text/javascript",
								"exec": [
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}/devices/count",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}",
								"devices",
								"count"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Load Balancing",
			"item": [
				{
					"name": "setLB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4f36d75-f316-433c-ba39-7d9a089e51f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "5"
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}/loadbalancing",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}",
								"loadbalancing"
							]
						}
					},
					"response": []
				},
				{
					"name": "detailsOfLB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7f99771-1488-4bd5-bd61-232073bb3392",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": ",
									"        {",
									"          \"isEnabled\": ",
									"          {",
									"            \"type\": \"boolean\"",
									"          },",
									"          \"powerLimit\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"        },",
									"          \"required\": [",
									"              \"isEnabled\",",
									"              \"powerLimit\"",
									"            ]",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"isEnabled field is present\"]= responseBody.has(\"isEnabled\");",
									"tests[\"powerLimit field is present\"]= responseBody.has(\"powerLimit\");",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}/loadbalancing",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}",
								"loadbalancing"
							]
						}
					},
					"response": []
				},
				{
					"name": "changeLB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ba8c142-4c2f-400a-9ee4-63b90a3fe985",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "10"
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}/loadbalancing",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}",
								"loadbalancing"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteLB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "849863c0-89c1-4b85-a791-a97d963fe335",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}/loadbalancing",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}",
								"loadbalancing"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attribute",
			"item": [
				{
					"name": "attributeValue(effectiveValue)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07d39e59-a55b-416d-af43-a9e4abf7de72",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"items\":",
									"  {",
									"  \"type\": \"object\",",
									"  \"properties\": ",
									"  {",
									"      \"ownValue\":",
									"      {",
									"          \"type\":\"string\"",
									"      },",
									"      \"effectiveValue\": ",
									"      {",
									"      \"type\":\"object\",",
									"      \"properties\":",
									"                {",
									"                \"state\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"zip\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"city\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"address\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"timeZone\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                ",
									"\"required\":",
									"[",
									"    \"state\",",
									"    \"zip\",",
									"    \"city\",",
									"    \"address\",",
									"    \"timeZone\",",
									"    \"ownValue\",",
									"    \"effectiveValue\"",
									"]",
									"",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"    ",
									"",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"state field is present\"]= responseBody.has(\"state\");",
									"tests[\"zip field is present\"]= responseBody.has(\"zip\");",
									"tests[\"city field is present\"]= responseBody.has(\"city\");",
									"tests[\"address field is present\"]= responseBody.has(\"address\");",
									"tests[\"timeZone field is present\"]= responseBody.has(\"timeZone\");",
									"",
									"pm.variables.get(\"variable_key\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}attributes/address/objects/{{new_location_id}}",
							"host": [
								"{{url}}attributes"
							],
							"path": [
								"address",
								"objects",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "appliesAttribute",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fadde02e-25b5-4043-9238-dbd935da5c3f",
								"type": "text/javascript",
								"exec": [
									"//timeofuse"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b67eeec9-67c1-4f4c-be68-e2c9866852cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"City\": \"Marquette\",\r\n  \"State\": \"EE\",\r\n  \"Address\": \"817 University Street\",\r\n  \"Zip\": \"49855\",\r\n  \"TimeZone\": \"Mid-Atlantic Standard Time\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}attributes/Address/objects/{{new_location_id}}",
							"host": [
								"{{url}}attributes"
							],
							"path": [
								"Address",
								"objects",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeAttribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5a78af7-be5c-43f7-b456-1cf34250b7b3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}attributes/Address/objects/{{new_location_id}}",
							"host": [
								"{{url}}attributes"
							],
							"path": [
								"Address",
								"objects",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Client",
			"item": [
				{
					"name": "createClient CAD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "507dc104-cefe-4711-9b9f-0aef42eb20a2",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= '6dofik+'+getRandomInt(1, 10000)+'@gmail.com'",
									"client= 'TestClient'+getRandomInt(1,10000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_client\", client);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f123d048-0994-4cbf-92cc-96434675cfc8",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									" ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"tests[\"Response has new_client_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); ",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_client_id\", _str);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token-reseller}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_client}}\",\r\n  \"email\": \"{{random_email}}\",\r\n  \"address\": {\r\n    \"address\": \"efwefwef\",\r\n    \"city\": \"strinwefweg\",\r\n    \"state\": \"string\",\r\n    \"zip\": \"20815\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  },\r\n  \"currency\": {\r\n    \"alphabeticCode\": \"CAD\",\r\n    \"numericCode\": \"124\",\r\n    \"name\": \"Canadian Dollar\"\r\n  },\r\n    \"firstName\": \"sdfsdf\",\r\n    \"lastName\": \"sdfsdf\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}clients",
							"host": [
								"{{url}}clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "createClient USD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "507dc104-cefe-4711-9b9f-0aef42eb20a2",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= '6dofik+'+getRandomInt(1, 10000)+'@gmail.com'",
									"client= 'TestClient'+getRandomInt(1,10000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_client\", client);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f123d048-0994-4cbf-92cc-96434675cfc8",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									" ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"tests[\"Response has new_client_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); ",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_client_id\", _str);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token-reseller}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_client}}\",\r\n  \"email\": \"{{random_email}}\",\r\n  \"address\": {\r\n    \"address\": \"efwefwef\",\r\n    \"city\": \"strinwefweg\",\r\n    \"state\": \"string\",\r\n    \"zip\": \"20815\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  },\r\n  \"currency\": {\r\n    \"alphabeticCode\": \"USD\",\r\n    \"numericCode\": \"840\",\r\n    \"name\": \"United States Dollar\"\r\n  },\r\n    \"firstName\": \"sdfsdf\",\r\n    \"lastName\": \"sdfsdf\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}clients",
							"host": [
								"{{url}}clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "getClients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43796335-3888-46ef-900f-763e9a16a6b7",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"array\",",
									"  \"items\": ",
									"  {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"    {  ",
									"        \"id\": ",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\": ",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"]",
									"",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token-reseller}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}clients",
							"host": [
								"{{url}}clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "detailsOfClientID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27853d15-ae28-4939-be58-2726ba1946dc",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"items\": ",
									"  {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"    {  ",
									"        \"id\": ",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\": ",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"address\": {",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"            {",
									"                \"address\": ",
									"                {",
									"                    \"type\":\"string\"",
									"                }, ",
									"                \"city\": ",
									"                {",
									"                    \"type\":\"string\"",
									"                }, ",
									"                \"state\": ",
									"                {",
									"                    \"type\":\"string\"",
									"                }, ",
									"                \"zip\": ",
									"                {",
									"                    \"type\":\"string\"",
									"                }, ",
									"                \"timeZone\": ",
									"                {",
									"                    \"type\":\"string\"",
									"                }, ",
									"                    ",
									"                        \"type\": \"object\",",
									"                        \"properties\": ",
									"                        {",
									"                            \"createdDate\": ",
									"                            {",
									"                                \"type\":\"string\"",
									"                            }, ",
									"                        ",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"    \"address\",",
									"    \"address\",",
									"    \"city\",",
									"    \"state\",",
									"    \"zip\",",
									"    \"timeZone\",",
									"    \"createdDate\"",
									"]",
									"                        ",
									"                    }",
									"                }",
									"            }",
									"        ",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"address field is present\"]= responseBody.has(\"address\");",
									"tests[\"address field is present\"]= responseBody.has(\"address\");",
									"tests[\"city field is present\"]= responseBody.has(\"city\");",
									"tests[\"state field is present\"]= responseBody.has(\"state\");",
									"tests[\"zip field is present\"]= responseBody.has(\"zip\");",
									"tests[\"timeZone field is present\"]= responseBody.has(\"timeZone\");",
									"tests[\"createdDate field is present\"]= responseBody.has(\"createdDate\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token-reseller}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}clients/{{new_client_id}}",
							"host": [
								"{{url}}clients"
							],
							"path": [
								"{{new_client_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImEzck1VZ01Gdjl0UGNsTGE2eUYzekFrZnF1RSIsImtpZCI6ImEzck1VZ01Gdjl0UGNsTGE2eUYzekFrZnF1RSJ9.eyJpc3MiOiJodHRwczovL2picm9vbS1kZXYtYjJiLWlkZW50aXR5c2VydmVyLXdlYi5henVyZXdlYnNpdGVzLm5ldC9pZGVudGl0eSIsImF1ZCI6Imh0dHBzOi8vamJyb29tLWRldi1iMmItaWRlbnRpdHlzZXJ2ZXItd2ViLmF6dXJld2Vic2l0ZXMubmV0L2lkZW50aXR5L3Jlc291cmNlcyIsImV4cCI6MTUxODcyOTQ2OCwibmJmIjoxNTE4MDA5NDY4LCJjbGllbnRfaWQiOiJKdWljZUJveC5XZWIuQ2xpZW50LlVpIiwic2NvcGUiOlsib3BlbmlkIiwicHJvZmlsZSIsInJvbGVzIiwiYXBpIl0sInN1YiI6ImQ3MDk2OTM2LTVjMzMtNDE0YS1hZTNlLTRkOTJkMTExZGQ0NSIsImF1dGhfdGltZSI6MTUxODAwOTQ2OCwiaWRwIjoiaWRzcnYiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJtYXRpbmFrc3UrMUBnbWFpbC5jb20iLCJlbWFpbCI6Im1hdGluYWtzdSsxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImdpdmVuX25hbWUiOiJtYXRpbmFrc3UrMUBnbWFpbC5jb20iLCJmYW1pbHlfbmFtZSI6Im5vdCBzdXBwb3J0ZWQiLCJhbXIiOlsicGFzc3dvcmQiXX0.TX3iV3vLXsUkGw_jMpk5ZKG14hIZrrbJFatDskp0Cjzww-qv3zYJgE8uhdUyiqhzhB7_vAP8Ws-k2sE09dLze6rh3NfwMdWXhOWRZVRs-fQLLjzK4NOTvJzHkq-NemGEz4pr0XIclMq_sVqrTtaWQT3FDehJNNlPZSZdsvbGNN6uEncifBWC-1a0IPfT-Fd3tFntualgWxNqTMmll3jOcjRansoRFT6sN-PJ-mu7CD29OfD8slOwD-bPqVviFjxc4cbs6q4H4xJViivTLH03XZeJnyrJ7exFz7qdIgYen2Q1mbjuRjenWCTVspAS7XpqYopFMilCokslUIL_u5541Q",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8bd22c02-c947-4baf-b906-8bee34356d51",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "07accc47-6cc1-43f7-8c44-61e6d2d4d2f3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Common",
			"item": [
				{
					"name": "Timezone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e25490f5-84f7-49a2-952c-8ed377e488a9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"     \"type\": \"array\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"            \"id\": ",
									"            {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": ",
									"            {",
									"                \"type\": \"string\"",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"]",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}timezones",
							"host": [
								"{{url}}timezones"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeviceSession",
			"item": [
				{
					"name": "detailsOfLastSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "614e46bd-9931-4495-a31f-97dcdbb6c5db",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \"devicesIds\" : \"eb7f8762-0b0d-4d07-be77-57bfc3abe4c1\"\n    }\n]\n"
						},
						"url": {
							"raw": "{{url}}devices/sessions/last",
							"host": [
								"{{url}}devices"
							],
							"path": [
								"sessions",
								"last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filter",
			"item": [
				{
					"name": "Calculate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5ade162-f6df-4028-a062-06ce4d995914",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"    {",
									"    \"location\":",
									"    {",
									"    \"type\": \"array\",",
									"    \"properties\": ",
									"        {",
									"            \"type\": \"object\",",
									"            \"properties\": ",
									"            {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"        \"name\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"            \"buildings\":",
									"                {",
									"                    \"type\": \"array\",",
									"                    \"properties\": ",
									"                    {",
									"                        \"type\": \"object\",",
									"                        \"properties\": ",
									"                            {",
									"                            \"id\": ",
									"                            {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"name\": ",
									"                            {",
									"                                \"type\": \"string\"",
									"                            }, ",
									"\"required\":",
									"[",
									"    \"locations\",",
									"    \"id\",",
									"    \"name\",",
									"    \"buildings\"",
									"]",
									"                            }            ",
									"}",
									"}",
									"}",
									"}",
									"}",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"locations field is present\"]= responseBody.has(\"locations\");",
									"tests[\"buildings field is present\"]= responseBody.has(\"buildings\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"{{new_location_id}}\"\r\n  ],\r\n  \"buildings\": [\r\n    \"{{new_sublocation_id}}\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{url}}filters/calculate",
							"host": [
								"{{url}}filters"
							],
							"path": [
								"calculate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Object",
			"item": [
				{
					"name": "physicalParentID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de45fddc-a1ba-4297-b9c9-faced6ec5f52",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"]",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}objects/{{new_sublocation_id}}/parent/physical",
							"host": [
								"{{url}}objects"
							],
							"path": [
								"{{new_sublocation_id}}",
								"parent",
								"physical"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Partner",
			"item": [
				{
					"name": "autorizedPartner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c03e772-1907-45d4-9da7-80708135b76f",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"        \"name\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"        \"type\": ",
									"            {",
									"            \"type\": \"number\"",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"    \"type\"",
									"]",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"id field is present\"]= responseBody.has(\"id\");",
									"tests[\"name field is present\"]= responseBody.has(\"name\");",
									"tests[\"type field is present\"]= responseBody.has(\"type\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Permission",
			"item": [
				{
					"name": "avaliblePermissionTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f824456b-ebe5-463c-a8f5-bc1e6d36ab6f",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"number\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"name\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/types",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"types"
							]
						}
					},
					"response": []
				},
				{
					"name": "subjectPermission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba551d55-fdd0-4a58-b9a9-f2b6ff3b98f4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"permissionType\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"id\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"            {",
									"                \"type\":\"array\",",
									"                \"subject\":",
									"                {",
									"                    \"type\":\"object\",",
									"                    \"properties\":",
									"                    {",
									"                        \"id\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"name\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"type\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"deny\":",
									"                        {",
									"                            \"type\":\"object\",",
									"                            \"properties\":",
									"                            {",
									"                                \"value\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"inherited\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"allow\":",
									"                                {",
									"                                    \"type\":\"object\",",
									"                                    \"properties\":",
									"                                    {",
									"                                        \"value\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"                                    \"inherited\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"\"required\": [",
									"                \"permissionType\", ",
									"                \"id\",",
									"                \"name\",",
									"                \"id\",",
									"                \"subjects\",",
									"                \"id\",",
									"                \"name\",",
									"                \"type\",",
									"                \"deny\",",
									"                \"value\",",
									"                \"inherited\",",
									"                \"allow\",",
									"                \"value\",",
									"                \"inherited\"",
									"            ]",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }    ",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"permissionType field is present\"]= responseBody.has(\"permissionType\");",
									"tests[\"id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"subjects field is present\"]= responseBody.has(\"subjects\");",
									"tests[\"deny field is present\"]= responseBody.has(\"deny\");",
									"tests[\"allow field is present\"]= responseBody.has(\"allow\");",
									"tests[\"value field is present\"]= responseBody.has(\"value\");",
									"tests[\"inherited field is present\"]= responseBody.has(\"inherited\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/types/1/subjects",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"types",
								"1",
								"subjects"
							]
						}
					},
					"response": []
				},
				{
					"name": "listOfSubjectPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8129d9c2-ae8f-4d91-9c36-084ac6a4a88e",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"array\",",
									"  \"permissionType\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"id\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"            {",
									"                \"type\":\"array\",",
									"                \"subject\":",
									"                {",
									"                    \"type\":\"object\",",
									"                    \"properties\":",
									"                    {",
									"                        \"id\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"name\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"type\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"deny\":",
									"                        {",
									"                            \"type\":\"object\",",
									"                            \"properties\":",
									"                            {",
									"                                \"value\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"inherited\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"allow\":",
									"                                {",
									"                                    \"type\":\"object\",",
									"                                    \"properties\":",
									"                                    {",
									"                                        \"value\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"                                    \"inherited\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"\"required\": [",
									"                \"permissionType\", ",
									"                \"id\",",
									"                \"name\",",
									"                \"id\",",
									"                \"subjects\",",
									"                \"id\",",
									"                \"name\",",
									"                \"type\",",
									"                \"deny\",",
									"                \"value\",",
									"                \"inherited\",",
									"                \"allow\",",
									"                \"value\",",
									"                \"inherited\"",
									"            ]",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }    ",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"permissionType field is present\"]= responseBody.has(\"permissionType\");",
									"tests[\"id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"subjects field is present\"]= responseBody.has(\"subjects\");",
									"tests[\"deny field is present\"]= responseBody.has(\"deny\");",
									"tests[\"allow field is present\"]= responseBody.has(\"allow\");",
									"tests[\"value field is present\"]= responseBody.has(\"value\");",
									"tests[\"inherited field is present\"]= responseBody.has(\"inherited\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/subjects",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"subjects"
							]
						},
						"description": "Checks if authorized user has permission to object"
					},
					"response": []
				},
				{
					"name": "userPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d1709b3-2ab8-4066-9bc4-3290a9ef478e",
								"type": "text/javascript",
								"exec": [
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/types/2/check",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"types",
								"2",
								"check"
							]
						},
						"description": "Checks if authorized user has permission to object"
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "periodPerMonth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "781c0233-0aa3-4075-b1c0-0b0ee405f9dd",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"array\",",
									"    \"properties\":",
									"    {",
									"        \"timestamp\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"energy\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"timestamp\",",
									"            \"energy\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"timestamp field is present\"]= responseBody.has(\"timestamp\");",
									"tests[\"energy field is present\"]= responseBody.has(\"energy\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}/reports/energy/monthly/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"reports",
								"energy",
								"monthly",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "periodPerDays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1137bbe3-c3eb-4492-b286-58dee06de616",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"array\",",
									"    \"properties\":",
									"    {",
									"        \"timestamp\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"energy\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"timestamp\",",
									"            \"energy\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"timestamp field is present\"]= responseBody.has(\"timestamp\");",
									"tests[\"energy field is present\"]= responseBody.has(\"energy\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/energy/daily/3/2018",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"energy",
								"daily",
								"3",
								"2018"
							]
						}
					},
					"response": []
				},
				{
					"name": "periodLastMonth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18573dc3-828b-46e9-b6c7-cb4d301cdc18",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"array\",",
									"    \"properties\":",
									"    {",
									"        \"timestamp\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"energy\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"timestamp\",",
									"            \"energy\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"timestamp field is present\"]= responseBody.has(\"timestamp\");",
									"tests[\"energy field is present\"]= responseBody.has(\"energy\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/energy/daily/last-month",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"energy",
								"daily",
								"last-month"
							]
						}
					},
					"response": []
				},
				{
					"name": "deviceStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87ca388f-a6fb-4116-8f2a-77b97fda4ec0",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": ",
									"        {",
									"          \"charging\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"          \"plugin\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"          \"standby\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"          \"offline\": ",
									"          {",
									"            \"type\": \"number\"",
									"          }",
									"        },",
									"\"required\": ",
									"[",
									"    \"charging\",",
									"    \"plugin\",",
									"    \"standby\",",
									"    \"offline\"",
									"]",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"charging field is present\"]= responseBody.has(\"charging\");",
									"tests[\"plugin field is present\"]= responseBody.has(\"plugin\");",
									"tests[\"standby field is present\"]= responseBody.has(\"standby\");",
									"tests[\"offline field is present\"]= responseBody.has(\"offline\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"{{new_location_id}}\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/devices/status",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"devices",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "energyStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bff91b22-ae91-4ce6-aca0-41fb283d77e6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"{{new_location_id}}\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/locations/energy",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"locations",
								"energy"
							]
						}
					},
					"response": []
				},
				{
					"name": "aggregationStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81e99eea-9b29-44d3-9797-b1bcf17e43d6",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"locations\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"total\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        \"energyByLocation\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"total\",",
									"            \"energyByLocation\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"total field is present\"]= responseBody.has(\"total\");",
									"tests[\"energyByLocation field is present\"]= responseBody.has(\"energyByLocation\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"{{new_location_id}}\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/locations/aggregation",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"locations",
								"aggregation"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportUsersCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b702022-5078-46f8-85c2-c1e5c18226d1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"totalCount\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        \"adminsCount\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"totalCount\",",
									"            \"adminsCount\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"totalCount field is present\"]= responseBody.has(\"totalCount\");",
									"tests[\"adminsCount field is present\"]= responseBody.has(\"adminsCount\");",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}reports/users",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subject",
			"item": [
				{
					"name": "filteredByQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdf53f8f-ed18-4acd-b1b5-26283e6b8997",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"type\": {",
									"            \"type\": \"number\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"name\",",
									"              \"type\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"//tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"//tests[\"name field is present\"]= responseBody.has(\"name\");",
									"//tests[\"type field is present\"]= responseBody.has(\"type\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}subjects/?q={{user_email}}",
							"host": [
								"{{url}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "q",
									"value": "{{user_email}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "accountInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70fac654-a6a0-4ec9-b7bb-d4091626bc9f",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"identityId field is present\"]= responseBody.has(\"identityId\");",
									"tests[\"firstName field is present\"]= responseBody.has(\"firstName\");",
									"tests[\"lastName field is present\"]= responseBody.has(\"lastName\");",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}account",
							"host": [
								"{{url}}account"
							]
						}
					},
					"response": []
				},
				{
					"name": "resetPSWD",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c54fce5f-cda3-4069-98e7-a6ebb35d22df",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}account/reset-password",
							"host": [
								"{{url}}account"
							],
							"path": [
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "createUserAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d244afdc-5990-49a2-b4ea-a778c4dbfe13",
								"type": "text/javascript",
								"exec": [
									" var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Users, createUser, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, createUser, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Users, createUser, Response has userID\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody);",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"postman.setEnvironmentVariable(\"user_id\", _str);",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf7e9cfd-e3cc-4dae-a5c1-1e4afd518219",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= 'chikalov.ilya+'+getRandomInt(1, 1000)+'@gmail.com'",
									"user= 'TestUser'+getRandomInt(1,1000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_user\", user);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{random_email}}\",\r\n  \"firstName\": \"{{random_user}}\",\r\n  \"lastName\": \"Admin\",\r\n  \"userType\":0\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUserDriver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59b3e514-1c68-4189-9640-08b364fc0e77",
								"type": "text/javascript",
								"exec": [
									" var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Users, createUser, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, createUser, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Users, createUser, Response has userID\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody);",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"postman.setEnvironmentVariable(\"new_user\", _str);",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf7e9cfd-e3cc-4dae-a5c1-1e4afd518219",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= 'chikalov.ilya+'+getRandomInt(1, 1000)+'@gmail.com'",
									"user= 'TestUser'+getRandomInt(1,1000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_user\", user);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{random_email}}\",\r\n  \"firstName\": \"{{random_user}}\",\r\n  \"lastName\": \"{{random_user}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9099109-2482-4137-b6a6-2791b4d43850",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"email\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": [ \"string\", \"null\" ]",
									"          },",
									"          \"firstName\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"lastName\": {",
									"            \"type\": [ \"string\", \"null\" ]",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"email\",",
									"              \"name\",",
									"              \"firstName\",",
									"              \"lastName\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Users, getUsers, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Users, getUsers, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, getUsers, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Users, getUsers, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Users, getUsers, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Users, getUsers, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"postman.setEnvironmentVariable(\"user_email\", jsonData[0].email);",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserWithID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93346cc4-466f-492e-ab64-cd1a37f98762",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"email\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"email\",",
									"              \"name\"",
									"            ]",
									"    ",
									"}",
									"    ;",
									"",
									"tests[\"Users, getUserWithID, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Users, getUserWithID, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, getUserWithID, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Users, getUserWithID, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Users, getUserWithID, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Users, getUserWithID, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"//console.log(\"Validation failed: \", tv4.error);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserMemberOf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de2154ee-4ccd-4f87-815e-64d1e9fd84b4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"email\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"email\",",
									"              \"name\"",
									"            ]",
									"    ",
									"}",
									"    ;",
									"",
									"tests[\"Users, getUserMemberOf, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Users, getUserMemberOf, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, getUserMemberOf, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Users, getUserMemberOf, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Users, getUserMemberOf, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Users, getUserMemberOf, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"//console.log(\"Validation failed: \", tv4.error);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserGroup",
			"item": [
				{
					"name": "createGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb96840-fef0-46cc-941e-b964c53ea082",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Response has userGroupID\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody);",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"tests[_str]=1;",
									"",
									"pm.environment.set(\"new_user_group_id\", _str);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e507fd69-f45a-4b0c-9e48-10a48862b4f5",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestGroup+'+getRandomInt(1, 10000)",
									"",
									"pm.environment.set(\"random_user_group\", test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{random_user_group}}\"\n"
						},
						"url": {
							"raw": "{{url}}user-groups",
							"host": [
								"{{url}}user-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "addMemberToUserGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06b0aa77-cb78-4c02-832a-9d93f4d27ad5",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id}}/members/{{user_id}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id}}",
								"members",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "listOfUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "449bb00d-1ece-4f04-bf9a-318315e7230d",
								"exec": [
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"email field is present\"]= responseBody.has(\"email\");",
									"tests[\"name field is present\"]= responseBody.has(\"name\");",
									"tests[\"firstName field is present\"]= responseBody.has(\"firstName\");",
									"tests[\"lastName field is present\"]= responseBody.has(\"lastName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id}}/users",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListOfUserGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48dae5f9-b110-471a-aee7-a6ec03bc9170",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"usersCount\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"    \"usersCount\"",
									"]",
									"",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"usersCount field is present\"]= responseBody.has(\"usersCount\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups",
							"host": [
								"{{url}}user-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "userGroupID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75774603-e43d-4cca-b704-5a7483384d95",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"]",
									"",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Name field is present\"]= responseBody.has(\"name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteMemberFromUserGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbb5146b-de04-4c97-8618-aecc47b83444",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id}}/members/{{user_id}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id}}",
								"members",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f8e1125-469a-4e94-a529-34c333142e00",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rate",
			"item": [
				{
					"name": "listOfRateTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1af8f980-780e-4fbd-8a15-7809c1ebc159",
								"exec": [
									"var data = JSON.parse(responseBody);   ",
									"var jsonData = JSON.parse(responseBody);",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"array\",",
									"  \"items\":  {",
									"    \"type\": \"object\",",
									"    \"properties\":  {  ",
									"        \"id\": {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":  {",
									"            \"type\":\"string\"",
									"        },",
									"        \"configurationTypeName\": {",
									"            \"type\":\"string\"",
									"        },",
									"        \"isDefaultFree\": {",
									"            \"type\":\"boolean\"",
									"        },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"    \"configurationTypeName\",",
									"    \"isDefaultFree\"",
									"]",
									"",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"Rate, listOfRateTemplates, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Rate, listOfRateTemplates, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Rate, listOfRateTemplates, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Rate, listOfRateTemplates, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Rate, listOfRateTemplates, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Rate, listOfRateTemplates, configurationTypeName field is present\"]= responseBody.has(\"configurationTypeName\");",
									"postman.setEnvironmentVariable(\"template_id\", data[1].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rates/templates",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "createRate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b3fc450-e2e3-43a0-813c-1152776b3dcc",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestRate'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_rate\", test);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62f699df-4cee-438a-a94b-04affa739994",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									" ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Response has new_location_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); //true или false (метод)",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_rate_id\", _str);",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_rate}}\",\r\n  \"templateId\": \"{{template_id}}\",\r\n  \"templateState\": {\r\n    \"session\": 1,\r\n    \"hour\": 5,\r\n    \"kWh\": 0\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}rates",
							"host": [
								"{{url}}rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "filteredRateList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25ac322c-ea0e-4dff-9ea3-35faf309630e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"{{new_location_id}}\"\r\n  ],\r\n  \"buildings\": [\r\n    \"{{new_sublocation_id}}\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}rates/list",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "assignRateToLoctation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4604defa-df77-4b21-9d4a-365d360a760c",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rateId\": \"{{new_rate_id}}\",\r\n  \"targetId\": \"{{new_location_id}}\",\r\n  \"inherit\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}rates/assign-location",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"assign-location"
							]
						}
					},
					"response": []
				},
				{
					"name": "assignRateToSubLoctation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b69cedd3-98a4-4b73-9425-5fc88f7ef882",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rateId\": \"{{new_rate_id}}\",\r\n  \"targetId\": \"{{new_sublocation_id}}\",\r\n  \"inherit\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}rates/assign-sublocation",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"assign-sublocation"
							]
						}
					},
					"response": []
				},
				{
					"name": "listOfClientTariffsExtended",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61b3beff-3390-4120-afcc-f241d3ca349b",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"created field is present\"]= responseBody.has(\"created\");",
									"tests[\"updated field is present\"]= responseBody.has(\"updated\");",
									"tests[\"name field is present\"]= responseBody.has(\"name\");",
									"tests[\"configurationType field is present\"]= responseBody.has(\"configurationType\");",
									"tests[\"configurationJson field is present\"]= responseBody.has(\"configurationJson\");",
									"tests[\"PerSessionTariff field is present\"]= responseBody.has(\"PerSessionTariff\");",
									"tests[\"PerHourTariff field is present\"]= responseBody.has(\"PerHourTariff\");",
									"tests[\"PerEnergyTariff field is present\"]= responseBody.has(\"PerEnergyTariff\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rates/list-extended",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"list-extended"
							]
						}
					},
					"response": []
				},
				{
					"name": "rateInfoByLoc/SubLoc/DevID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rates/object-rate/{{new_location_id}}",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"object-rate",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "listOfClientTariffs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66b3382b-f067-4694-8ae2-ed47d506fadb",
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"created field is present\"]= responseBody.has(\"created\");",
									"tests[\"updated field is present\"]= responseBody.has(\"updated\");",
									"tests[\"name field is present\"]= responseBody.has(\"name\");",
									"tests[\"configurationType field is present\"]= responseBody.has(\"configurationType\");",
									"tests[\"configurationJson field is present\"]= responseBody.has(\"configurationJson\");",
									"tests[\"PerSessionTariff field is present\"]= responseBody.has(\"PerSessionTariff\");",
									"tests[\"PerHourTariff field is present\"]= responseBody.has(\"PerHourTariff\");",
									"tests[\"PerEnergyTariff field is present\"]= responseBody.has(\"PerEnergyTariff\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rates",
							"host": [
								"{{url}}rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "locationsByRateID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f18d744c-6963-417b-9847-8cfdcfb0d2a4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rates/object-rate/{{new_location_id}}",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"object-rate",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "subLocationsByRateID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5375e5d-e5ae-44ba-9dfa-aa42f495da58",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}rates/object-rate/{{new_sublocation_id}}",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"object-rate",
								"{{new_sublocation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "udpateRate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3304ed4d-ebc6-487a-9e84-b837c28a9ead",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"templateName\": \"{{random_rate}}\",\r\n  \"templateState\": {\r\n    \"perSessionTariff\": 1,\r\n    \"perHourTariff\": 2,\r\n    \"perEnergyTariff\": 4\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}rates/{{new_rate_id}}",
							"host": [
								"{{url}}rates"
							],
							"path": [
								"{{new_rate_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "setNotificationSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d2d0f6f-1f18-4ad0-93f9-9f856a4c9c42",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"isEnabled\": true,\r\n\t\"settings\" : [\r\n\t\t{\r\n\t\t\t\"notificationTypeId\": 1,\r\n\t\t\t\"deliveryTypeId\": 1\r\n\t\t}\r\n]\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}notification",
							"host": [
								"{{url}}notification"
							]
						}
					},
					"response": []
				},
				{
					"name": "notificationSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d96cd712-09bf-42dd-8ba1-948b88dd80ed",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"    \"type\": \"object\", ",
									"    \"properties\": {",
									"        \"isEnabled\": {",
									"            \"type\": \"boolean\" ",
									"            },",
									"            \"type\": \"array\", ",
									"            \"settings\": {",
									"                \"notificationTypeId\": {",
									"                    \"type\": \"number\"",
									"                },",
									"                \"deliveryTypeId\": {",
									"                    \"type\": \"number\"",
									"                }",
									"                        }",
									"                  }",
									"            ",
									"};",
									"",
									"tests[\"Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"isEnabled field is present\"]= responseBody.has(\"isEnabled\");",
									"tests[\"settings field is present\"]= responseBody.has(\"settings\");",
									"tests[\"notificationTypeId field is present\"]= responseBody.has(\"notificationTypeId\");",
									"tests[\"deliveryTypeId field is present\"]= responseBody.has(\"deliveryTypeId\");",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}notification",
							"host": [
								"{{url}}notification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clean",
			"item": [
				{
					"name": "deleteSubLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "385090cb-8dec-4aab-b2b1-6134d3d3ce8f",
								"type": "text/javascript",
								"exec": [
									"tests[\"Clean, deleteSubLocation2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Clean, deleteSubLocation2, Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_sublocation_id}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_sublocation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca926550-0c18-4b4f-90b5-abeaf3a68b2f",
								"type": "text/javascript",
								"exec": [
									"tests[\"Clean, deleteLocation2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Clean, deleteLocation2, Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUserAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1a788bb-b84c-48fe-9204-04c19d9934da",
								"type": "text/javascript",
								"exec": [
									"tests[\"Clean, deleteUserAdmin, Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf7e9cfd-e3cc-4dae-a5c1-1e4afd518219",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= 'chikalov.ilya+'+getRandomInt(1, 1000)+'@gmail.com'",
									"user= 'TestUser'+getRandomInt(1,1000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_user\", user);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUserDriver",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d58859ef-5dce-457e-b1dd-6d23569798bd",
								"type": "text/javascript",
								"exec": [
									"tests[\"Clean, deleteUserDriver, Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf7e9cfd-e3cc-4dae-a5c1-1e4afd518219",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= 'chikalov.ilya+'+getRandomInt(1, 1000)+'@gmail.com'",
									"user= 'TestUser'+getRandomInt(1,1000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_user\", user);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{new_user}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{new_user}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	}
}