{
	"info": {
		"_postman_id": "5d3cb3cb-93da-4e26-8ea1-48f17eae365e",
		"name": "B2B_Alpha_TFS Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Locations",
			"item": [
				{
					"name": "createNewLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "940bd246-0cf6-4962-8ff2-b0a751893199",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									" ",
									"tests[\"Locations, createNewLocation, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, createNewLocation, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Locations, createNewLocation, Response has new_location_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); //true или false (метод)",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_location_id\", _str);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3fdec30d-05d2-4d96-bde7-7e060b0601f6",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestLocation+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_location1\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_location1}}\",\r\n  \"address\": {\r\n    \"address\": \"816 University Street\",\r\n    \"city\": \"Marquette\",\r\n    \"state\": \"MI\",\r\n    \"zip\": \"49855\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  }\r\n}\r\n\r\n "
						},
						"url": {
							"raw": "{{url}}locations",
							"host": [
								"{{url}}locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewLocation2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2473485f-d09f-4546-a024-56682e81cce0",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									" ",
									"tests[\"Locations, createNewLocation2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, createNewLocation2, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Locations, createNewLocation2, Response has new_location_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); //true или false (метод)",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_location_id2\", _str);",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f0c73e3d-4e83-4760-89a1-a237fa6708d7",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestLocation+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_location2\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_location2}}\",\r\n  \"address\": {\r\n    \"address\": \"816 University Street\",\r\n    \"city\": \"Marquette\",\r\n    \"state\": \"MI\",\r\n    \"zip\": \"49855\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  }\r\n}\r\n\r\n "
						},
						"url": {
							"raw": "{{url}}locations",
							"host": [
								"{{url}}locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewSubLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7be17391-28ce-4865-bd71-1b1f289ea83d",
								"type": "text/javascript",
								"exec": [
									" var jsonData = JSON.parse(responseBody);",
									"tests[\"Locations, createNewSubLocation, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, createNewSubLocation, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Locations, createNewSubLocation, Response has new_sublocation_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); ",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_sublocation_id\", _str);",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a163419-8a8b-4310-9fc0-44ae8e40ed89",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestSubLocation+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_sublocation1\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_sublocation1}}\",\r\n  \"address\": {\r\n    \"address\": \"817 University Street\",\r\n    \"city\": \"Marquette\",\r\n    \"state\": \"MI\",\r\n    \"zip\": \"49855\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  },\r\n  \"parentId\": \"{{new_location_id}}\" \r\n  \r\n}\r\n "
						},
						"url": {
							"raw": "{{url}}locations",
							"host": [
								"{{url}}locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewSubLocation2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92212c47-5849-4a59-8c65-da5c73c97278",
								"type": "text/javascript",
								"exec": [
									" var jsonData = JSON.parse(responseBody);",
									"tests[\"Locations, createNewSubLocation2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, createNewSubLocation2, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Locations, createNewSubLocation2, Response has new_sublocation_id\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody); ",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"pm.environment.set(\"new_sublocation_id2\", _str);",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0a2047a-0062-4596-ab5c-8391d5a0db8d",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestSubLocation+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_sublocation2\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{random_sublocation2}}\",\r\n  \"address\": {\r\n    \"address\": \"817 University Street\",\r\n    \"city\": \"Marquette\",\r\n    \"state\": \"MI\",\r\n    \"zip\": \"49855\",\r\n    \"timeZone\": \"Mid-Atlantic Standard Time\"\r\n  },\r\n  \"parentId\": \"{{new_location_id2}}\" \r\n  \r\n}\r\n "
						},
						"url": {
							"raw": "{{url}}locations",
							"host": [
								"{{url}}locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "clientLocationLookup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cdfcf0f-0f25-4e5a-89f9-bb217c7b7eca",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": ",
									"      {",
									"        \"type\": \"object\",",
									"        \"properties\": ",
									"        {",
									"          \"id\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"name\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Locations, clientLocationLookup, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Locations, clientLocationLookup, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, clientLocationLookup, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Locations, clientLocationLookup, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Locations, clientLocationLookup, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/lookup",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"lookup"
							]
						}
					},
					"response": []
				},
				{
					"name": "detailsOfLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50d640b0-dd2c-4c05-98b7-2228426d2e50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"    \"items\": ",
									"    {",
									"        \"type\":\"object\",",
									"        \"properties\":",
									"        {",
									"            \"id\":",
									"            {",
									"                \"type\":\"string\"",
									"            },",
									"            \"name\":",
									"            {",
									"                \"type\":\"string\"",
									"            },",
									"            \"address\":",
									"            {",
									"                \"type\":\"object\",",
									"                \"properties\":",
									"                {",
									"                    \"address\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"city\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"state\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"zip\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                     \"timeZone\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                    \"type\":\"object\",",
									"                    \"properties\":",
									"                    {",
									"                        \"isRoot\":",
									"                        {",
									"                            \"type\":\"boolean\"",
									"                        },",
									"                        \"parentId\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"parentLocation\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"\"required\": [",
									"                \"id\", ",
									"                \"name\",",
									"                \"address\",",
									"                \"address\",",
									"                \"city\",",
									"                \"state\",",
									"                \"zip\",",
									"                \"timeZone\",",
									"                \"isRoot\",",
									"                \"parentId\",",
									"                \"parentLocation\"",
									"            ]",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Locations, detailsOfLocation, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Locations, detailsOfLocation, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, detailsOfLocation, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Locations, detailsOfLocation, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Locations, detailsOfLocation, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Locations, detailsOfLocation, address field is present\"]= responseBody.has(\"address\");",
									"tests[\"Locations, detailsOfLocation, city field is present\"]= responseBody.has(\"city\");",
									"tests[\"Locations, detailsOfLocation, state field is present\"]= responseBody.has(\"state\");",
									"tests[\"Locations, detailsOfLocation, zip field is present\"]= responseBody.has(\"zip\");",
									"tests[\"Locations, detailsOfLocation, isRoot field is present\"]= responseBody.has(\"isRoot\");",
									"tests[\"Locations, detailsOfLocation, parentId field is present\"]= responseBody.has(\"parentId\");",
									"tests[\"Locations, detailsOfLocation, parentLocation field is present\"]= responseBody.has(\"parentLocation\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "locationsTree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f29e0f24-bc63-4ebc-9b16-59cc1f3844a3",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"array\",",
									"  \"data\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"devicesCount\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"inUseDevicesCount\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"id\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"address\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"isLocation\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"type\":\"array\",",
									"        \"children\": ",
									"            {",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"                {",
									"                \"devicesCount\":",
									"                    {",
									"                        \"type\":\"string\"",
									"                    },",
									"                    \"data\": ",
									"                    {",
									"                        \"type\":\"object\",",
									"                        \"properties\":",
									"                        {",
									"                            \"data\": ",
									"                            {",
									"                            \"type\":\"object\",",
									"                            \"properties\":",
									"                                {",
									"                                    \"status\": ",
									"                                    {",
									"                                        \"type\":\"object\",",
									"                                        \"properties\":",
									"                                        {",
									"                                            \"id\":",
									"                                            {",
									"                                                \"type\":\"string\"",
									"                                            },",
									"                                            \"name\":",
									"                                            {",
									"                                                \"type\":\"string\"",
									"                                            },",
									"                                            \"inUse\":",
									"                                            {",
									"                                                \"type\":\"string\"",
									"                                            },",
									"                                            \"type\":\"object\",",
									"                                                \"properties\": {",
									"                                                    \"reserved\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"physicalId\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"id\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"name\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"address\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"isLocation\":",
									"                                                    {",
									"                                                        \"type\":\"string\"",
									"                                                    },",
									"                                                    \"type\":\"object\",",
									"                                                    \"properties\":",
									"                                                        {",
									"                                                            \"children\":",
									"                                                            {",
									"                                                                \"type\":\"string\"",
									"                                                            },",
									"          \"required\": [",
									"                \"data\", ",
									"                \"devicesCount\",",
									"                \"inUseDevicesCount\",",
									"                \"id\",",
									"                \"name\",",
									"                \"address\",",
									"                \"isLocation\",",
									"                \"children\",",
									"                \"data\",",
									"                \"status\",",
									"                \"id\",",
									"                \"name\",",
									"                \"inUse\",",
									"                \"reserved\",",
									"                \"physicalId\",",
									"                \"id\",",
									"                \"name\",",
									"                \"address\",",
									"                \"isLocation\",",
									"                \"children\"",
									"            ]",
									"                                                }",
									"                                            }   ",
									"                                        }   ",
									"                                    }   ",
									"                                }   ",
									"                            }   ",
									"                        }   ",
									"                    }   ",
									"                }   ",
									"            }                                                ",
									"        }                                                  ",
									"    }",
									"};",
									"",
									"    ",
									"",
									"tests[\"Locations, locationsTree, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Locations, locationsTree, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, locationsTree, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Locations, locationsTree, data field is present\"]= responseBody.has(\"data\");",
									"tests[\"Locations, locationsTree, devicesCount field is present\"]= responseBody.has(\"devicesCount\");",
									"tests[\"Locations, locationsTree, inUseDevicesCount field is present\"]= responseBody.has(\"inUseDevicesCount\");",
									"tests[\"Locations, locationsTree, id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Locations, locationsTree, name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Locations, locationsTree, address field is present\"]= responseBody.has(\"address\");",
									"tests[\"Locations, locationsTree, isLocation field is present\"]= responseBody.has(\"isLocation\");",
									"tests[\"Locations, locationsTree, children field is present\"]= responseBody.has(\"children\");",
									"tests[\"Locations, locationsTree, inUse field is present\"]= responseBody.has(\"inUse\");",
									"tests[\"Locations, locationsTree, isLocation field is present\"]= responseBody.has(\"isLocation\");",
									"",
									"",
									"",
									"",
									"    ",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/tree/extended",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"tree",
								"extended"
							]
						}
					},
					"response": []
				},
				{
					"name": "locationDevices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c633887-f8f4-48b3-8b6a-2b5a9492b79b",
								"type": "text/javascript",
								"exec": [
									"tests[\"Locations, locationDevices, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, locationDevices, Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}/devices/count",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}",
								"devices",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteSubLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3814356c-f1d9-4568-bdd5-f4bc61a026d3",
								"type": "text/javascript",
								"exec": [
									"tests[\"Locations, deleteSubLocation, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, deleteSubLocation, Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_sublocation_id2}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_sublocation_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21082299-d051-42fb-bc0a-6f5e4524c383",
								"type": "text/javascript",
								"exec": [
									"tests[\"Locations, deleteLocation, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Locations, deleteLocation, Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id2}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attribute",
			"item": [
				{
					"name": "attributeValue(effectiveValue)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "723aaa08-c69b-4c90-8889-a73d18e105a5",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"items\":",
									"  {",
									"  \"type\": \"object\",",
									"  \"properties\": ",
									"  {",
									"      \"ownValue\":",
									"      {",
									"          \"type\":\"string\"",
									"      },",
									"      \"effectiveValue\": ",
									"      {",
									"      \"type\":\"object\",",
									"      \"properties\":",
									"                {",
									"                \"state\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"zip\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"city\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"address\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                \"timeZone\":",
									"                {",
									"                    \"type\":\"string\"",
									"                },",
									"                ",
									"\"required\":",
									"[",
									"    \"state\",",
									"    \"zip\",",
									"    \"city\",",
									"    \"address\",",
									"    \"timeZone\",",
									"    \"ownValue\",",
									"    \"effectiveValue\"",
									"]",
									"",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"    ",
									"",
									"",
									"tests[\"Attribute, attributeValue(effectiveValue), Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Attribute, attributeValue(effectiveValue), Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Attribute, attributeValue(effectiveValue), Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Attribute, attributeValue(effectiveValue), state field is present\"]= responseBody.has(\"state\");",
									"tests[\"Attribute, attributeValue(effectiveValue), zip field is present\"]= responseBody.has(\"zip\");",
									"tests[\"Attribute, attributeValue(effectiveValue), city field is present\"]= responseBody.has(\"city\");",
									"tests[\"Attribute, attributeValue(effectiveValue), address field is present\"]= responseBody.has(\"address\");",
									"tests[\"Attribute, attributeValue(effectiveValue), timeZone field is present\"]= responseBody.has(\"timeZone\");",
									"",
									"pm.variables.get(\"variable_key\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}attributes/address/objects/{{new_location_id}}",
							"host": [
								"{{url}}attributes"
							],
							"path": [
								"address",
								"objects",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "appliesAttribute",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fadde02e-25b5-4043-9238-dbd935da5c3f",
								"type": "text/javascript",
								"exec": [
									"//timeofuse"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9befd37f-8e7b-4067-983e-f5950bfb0ffc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Attribute, appliesAttribute, Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"City\": \"Marquette\",\r\n  \"State\": \"EE\",\r\n  \"Address\": \"817 University Street\",\r\n  \"Zip\": \"49855\",\r\n  \"TimeZone\": \"Mid-Atlantic Standard Time\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}attributes/Address/objects/{{new_location_id}}",
							"host": [
								"{{url}}attributes"
							],
							"path": [
								"Address",
								"objects",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeAttribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e55a829b-8f2f-4c07-9164-a6057233695e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Attribute, removeAttribute, Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}attributes/Address/objects/{{new_location_id}}",
							"host": [
								"{{url}}attributes"
							],
							"path": [
								"Address",
								"objects",
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Common",
			"item": [
				{
					"name": "Timezone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d42b79-f13a-4944-a977-cbaa278d0f23",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"     \"type\": \"array\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"            \"id\": ",
									"            {",
									"                \"type\": \"string\"",
									"            },",
									"            \"name\": ",
									"            {",
									"                \"type\": \"string\"",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"]",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Common, Timezone, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Common, Timezone, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Common, Timezone, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Common, Timezone, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Common, Timezone, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}timezones",
							"host": [
								"{{url}}timezones"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeviceSession",
			"item": [
				{
					"name": "detailsOfLastSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12602ccc-a6bb-4cd9-94cf-5598b4e1cc64",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DeviceSession, detailsOfLastSession, Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \"devicesIds\" : \"eb7f8762-0b0d-4d07-be77-57bfc3abe4c1\"\n    }\n]\n"
						},
						"url": {
							"raw": "{{url}}devices/sessions/last",
							"host": [
								"{{url}}devices"
							],
							"path": [
								"sessions",
								"last"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filter",
			"item": [
				{
					"name": "Calculate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db6bb7af-6a33-4be4-b2b4-7e6cac717e52",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"    {",
									"    \"location\":",
									"    {",
									"    \"type\": \"array\",",
									"    \"properties\": ",
									"        {",
									"            \"type\": \"object\",",
									"            \"properties\": ",
									"            {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"        \"name\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"            \"buildings\":",
									"                {",
									"                    \"type\": \"array\",",
									"                    \"properties\": ",
									"                    {",
									"                        \"type\": \"object\",",
									"                        \"properties\": ",
									"                            {",
									"                            \"id\": ",
									"                            {",
									"                                \"type\": \"string\"",
									"                            },",
									"                            \"name\": ",
									"                            {",
									"                                \"type\": \"string\"",
									"                            }, ",
									"\"required\":",
									"[",
									"    \"locations\",",
									"    \"id\",",
									"    \"name\",",
									"    \"buildings\"",
									"]",
									"                            }            ",
									"}",
									"}",
									"}",
									"}",
									"}",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Filter, Calculate, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Filter, Calculate, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Filter, Calculate, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Filter, Calculate, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Filter, Calculate, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Filter, Calculate, locations field is present\"]= responseBody.has(\"locations\");",
									"tests[\"Filter, Calculate, buildings field is present\"]= responseBody.has(\"buildings\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"{{new_location_id}}\"\r\n  ],\r\n  \"buildings\": [\r\n    \"{{new_sublocation_id}}\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{url}}filters/calculate",
							"host": [
								"{{url}}filters"
							],
							"path": [
								"calculate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Object",
			"item": [
				{
					"name": "physicalParentID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95c36745-84ce-4cf1-b7fa-f8a029871b8a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"]",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Object, physicalParentID, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Object, physicalParentID, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Object, physicalParentID, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}objects/{{new_sublocation_id}}/parent/physical",
							"host": [
								"{{url}}objects"
							],
							"path": [
								"{{new_sublocation_id}}",
								"parent",
								"physical"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Partner",
			"item": [
				{
					"name": "autorizedPartner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ee6168c-f546-4924-9782-4f8c73b59471",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": ",
									"    {",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"        \"name\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"        \"type\": ",
									"            {",
									"            \"type\": \"number\"",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"    \"type\"",
									"]",
									"        }",
									"    }",
									"};",
									"",
									"tests[\"Partner, autorizedPartner, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Partner, autorizedPartner, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Partner, autorizedPartner, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Partner, autorizedPartner, id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Partner, autorizedPartner, name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Partner, autorizedPartner, type field is present\"]= responseBody.has(\"type\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/partners",
							"host": [
								"{{url}}"
							],
							"path": [
								"partners"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Permission",
			"item": [
				{
					"name": "avaliblePermissionTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52e577e6-dc40-4a0a-84d2-2b9c1f9ed1d4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"number\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"name\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Permission, avaliblePermissionTypes, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Permission, avaliblePermissionTypes, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Permission, avaliblePermissionTypes, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Permission, avaliblePermissionTypes, id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Permission, avaliblePermissionTypes, Name field is present\"]= responseBody.has(\"name\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/types",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"types"
							]
						}
					},
					"response": []
				},
				{
					"name": "subjectPermission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a372cd9f-9512-4bda-9ebc-f09797ec3f28",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"permissionType\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"id\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"            {",
									"                \"type\":\"array\",",
									"                \"subject\":",
									"                {",
									"                    \"type\":\"object\",",
									"                    \"properties\":",
									"                    {",
									"                        \"id\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"name\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"type\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"deny\":",
									"                        {",
									"                            \"type\":\"object\",",
									"                            \"properties\":",
									"                            {",
									"                                \"value\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"inherited\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"allow\":",
									"                                {",
									"                                    \"type\":\"object\",",
									"                                    \"properties\":",
									"                                    {",
									"                                        \"value\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"                                    \"inherited\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"\"required\": [",
									"                \"permissionType\", ",
									"                \"id\",",
									"                \"name\",",
									"                \"id\",",
									"                \"subjects\",",
									"                \"id\",",
									"                \"name\",",
									"                \"type\",",
									"                \"deny\",",
									"                \"value\",",
									"                \"inherited\",",
									"                \"allow\",",
									"                \"value\",",
									"                \"inherited\"",
									"            ]",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }    ",
									"};",
									"",
									"tests[\"Permission, subjectPermission, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Permission, subjectPermission, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Permission, subjectPermission, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Permission, subjectPermission, permissionType field is present\"]= responseBody.has(\"permissionType\");",
									"tests[\"Permission, subjectPermission, id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Permission, subjectPermission, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Permission, subjectPermission, subjects field is present\"]= responseBody.has(\"subjects\");",
									"tests[\"Permission, subjectPermission, deny field is present\"]= responseBody.has(\"deny\");",
									"tests[\"Permission, subjectPermission, allow field is present\"]= responseBody.has(\"allow\");",
									"tests[\"Permission, subjectPermission, value field is present\"]= responseBody.has(\"value\");",
									"tests[\"Permission, subjectPermission, inherited field is present\"]= responseBody.has(\"inherited\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/types/1/subjects",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"types",
								"1",
								"subjects"
							]
						}
					},
					"response": []
				},
				{
					"name": "listOfSubjectPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd6877c8-1682-4e64-bcb4-b6d42bfd508c",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"array\",",
									"  \"permissionType\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"id\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"name\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"            \"type\":\"object\",",
									"            \"properties\":",
									"            {",
									"                \"type\":\"array\",",
									"                \"subject\":",
									"                {",
									"                    \"type\":\"object\",",
									"                    \"properties\":",
									"                    {",
									"                        \"id\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"name\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"type\":",
									"                        {",
									"                            \"type\":\"string\"",
									"                        },",
									"                        \"deny\":",
									"                        {",
									"                            \"type\":\"object\",",
									"                            \"properties\":",
									"                            {",
									"                                \"value\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"inherited\":",
									"                                {",
									"                                    \"type\":\"boolean\"",
									"                                },",
									"                                \"allow\":",
									"                                {",
									"                                    \"type\":\"object\",",
									"                                    \"properties\":",
									"                                    {",
									"                                        \"value\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"                                    \"inherited\":",
									"                                    {",
									"                                        \"type\":\"boolean\"",
									"                                    },",
									"\"required\": [",
									"                \"permissionType\", ",
									"                \"id\",",
									"                \"name\",",
									"                \"id\",",
									"                \"subjects\",",
									"                \"id\",",
									"                \"name\",",
									"                \"type\",",
									"                \"deny\",",
									"                \"value\",",
									"                \"inherited\",",
									"                \"allow\",",
									"                \"value\",",
									"                \"inherited\"",
									"            ]",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }    ",
									"};",
									"",
									"tests[\"Permission, listOfSubjectPermissions, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Permission, listOfSubjectPermissions, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Permission, listOfSubjectPermissions, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Permission, listOfSubjectPermissions, permissionType field is present\"]= responseBody.has(\"permissionType\");",
									"tests[\"Permission, listOfSubjectPermissions, id field is present\"]= responseBody.has(\"id\");",
									"tests[\"Permission, listOfSubjectPermissions, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Permission, listOfSubjectPermissions, subjects field is present\"]= responseBody.has(\"subjects\");",
									"tests[\"Permission, listOfSubjectPermissions, deny field is present\"]= responseBody.has(\"deny\");",
									"tests[\"Permission, listOfSubjectPermissions, allow field is present\"]= responseBody.has(\"allow\");",
									"tests[\"Permission, listOfSubjectPermissions, value field is present\"]= responseBody.has(\"value\");",
									"tests[\"Permission, listOfSubjectPermissions, inherited field is present\"]= responseBody.has(\"inherited\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/subjects",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"subjects"
							]
						},
						"description": "Checks if authorized user has permission to object"
					},
					"response": []
				},
				{
					"name": "userPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98d94750-5625-416f-a066-f5d983ac8340",
								"type": "text/javascript",
								"exec": [
									"",
									"tests[\"Permission, userPermissions, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Permission, userPermissions, Status code is 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}permissions/objects/{{new_location_id}}/types/2/check",
							"host": [
								"{{url}}permissions"
							],
							"path": [
								"objects",
								"{{new_location_id}}",
								"types",
								"2",
								"check"
							]
						},
						"description": "Checks if authorized user has permission to object"
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "periodPerMonth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "968ed1f0-7789-4b68-8f9c-0bf6eec4426b",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"array\",",
									"    \"properties\":",
									"    {",
									"        \"timestamp\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"energy\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"timestamp\",",
									"            \"energy\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Report, periodPerMonth, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Report, periodPerMonth, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Report, periodPerMonth, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Report, periodPerMonth, timestamp field is present\"]= responseBody.has(\"timestamp\");",
									"tests[\"Report, periodPerMonth, energy field is present\"]= responseBody.has(\"energy\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}/reports/energy/monthly/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"reports",
								"energy",
								"monthly",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "periodPerDays",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aefaf0bf-212b-49ef-8501-2d9028fe8595",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"array\",",
									"    \"properties\":",
									"    {",
									"        \"timestamp\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"energy\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"timestamp\",",
									"            \"energy\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Report, periodPerDays, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Report, periodPerDays, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Report, periodPerDays, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Report, periodPerDays, timestamp field is present\"]= responseBody.has(\"timestamp\");",
									"tests[\"Report, periodPerDays, energy field is present\"]= responseBody.has(\"energy\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/energy/daily/3/2018",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"energy",
								"daily",
								"3",
								"2018"
							]
						}
					},
					"response": []
				},
				{
					"name": "periodLastMonth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6ff3b1-6b08-48ef-86db-81057b9713bb",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"array\",",
									"    \"properties\":",
									"    {",
									"        \"timestamp\":",
									"        {",
									"            \"type\":\"string\"",
									"        },",
									"        \"energy\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"timestamp\",",
									"            \"energy\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Report, periodLastMonth, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Report, periodLastMonth, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Report, periodLastMonth, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Report, periodLastMonth, timestamp field is present\"]= responseBody.has(\"timestamp\");",
									"tests[\"Report, periodLastMonth, energy field is present\"]= responseBody.has(\"energy\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/energy/daily/last-month",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"energy",
								"daily",
								"last-month"
							]
						}
					},
					"response": []
				},
				{
					"name": "deviceStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cab5e51-a5de-4ce2-bee6-0092c14240ee",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": ",
									"        {",
									"          \"charging\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"          \"plugin\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"          \"standby\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"          \"offline\": ",
									"          {",
									"            \"type\": \"number\"",
									"          }",
									"        },",
									"\"required\": ",
									"[",
									"    \"charging\",",
									"    \"plugin\",",
									"    \"standby\",",
									"    \"offline\"",
									"]",
									"    }",
									"};",
									"",
									"tests[\"Report, deviceStatus, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Report, deviceStatus, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Report, deviceStatus, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Report, deviceStatus, charging field is present\"]= responseBody.has(\"charging\");",
									"tests[\"Report, deviceStatus, plugin field is present\"]= responseBody.has(\"plugin\");",
									"tests[\"Report, deviceStatus, standby field is present\"]= responseBody.has(\"standby\");",
									"tests[\"Report, deviceStatus, offline field is present\"]= responseBody.has(\"offline\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/devices/status",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"devices",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportUsersCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6f1eb8e-3c57-4756-a605-98bd1c5896cf",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\":\"object\",",
									"  \"items\": ",
									" {",
									"    \"type\":\"object\",",
									"    \"properties\":",
									"    {",
									"        \"totalCount\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        \"adminsCount\":",
									"        {",
									"            \"type\":\"number\"",
									"        },",
									"        ",
									"\"required\": [",
									"            \"totalCount\",",
									"            \"adminsCount\"",
									"            ]",
									"    }",
									"}",
									"};",
									"",
									"tests[\"Report, reportUsersCount, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Report, reportUsersCount, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Report, reportUsersCount, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Report, reportUsersCount, totalCount field is present\"]= responseBody.has(\"totalCount\");",
									"tests[\"Report, reportUsersCount, adminsCount field is present\"]= responseBody.has(\"adminsCount\");",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locations\": [\r\n    \"18b197c0-8d0c-4aca-ba7b-25ae61abed53\"\r\n  ],\r\n  \"buildings\": [\r\n    \"00000000-0000-0000-0000-000000000000\"\r\n  ],\r\n  \"buildingsOnly\": true\r\n}"
						},
						"url": {
							"raw": "{{url}}reports/users",
							"host": [
								"{{url}}reports"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subject",
			"item": [
				{
					"name": "filteredByQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a37e89bb-9159-4005-af5b-d78c2ea9cd9d",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"type\": {",
									"            \"type\": \"number\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"name\",",
									"              \"type\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Subject, filteredByQuery, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Subject, filteredByQuery, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Subject, filteredByQuery, Status code is 200\"] = responseCode.code === 200;",
									"//tests[\"Subject, filteredByQuery, ID field is present\"]= responseBody.has(\"id\");",
									"//tests[\"Subject, filteredByQuery, name field is present\"]= responseBody.has(\"name\");",
									"//tests[\"Subject, filteredByQuery, type field is present\"]= responseBody.has(\"type\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}subjects/?q={{user_email}}",
							"host": [
								"{{url}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "q",
									"value": "{{user_email}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "accountInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16b019ee-2463-4db3-9c74-d8f8e18cbab2",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"    \"type\": \"object\",",
									"    \"properties\": ",
									"        {",
									"        \"id\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"            \"identityId\": {",
									"            \"type\": \"string\"",
									"            },",
									"            \"email\": ",
									"            {",
									"            \"type\": \"string\"",
									"            },",
									"            \"name\": ",
									"            {",
									"            \"type\": [ \"string\", \"null\" ]",
									"            },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"email\",",
									"    \"name\",",
									"    \"identityId\"",
									"]",
									"    }",
									"};",
									"",
									"tests[\"Account, accountInfo, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Account, accountInfo, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Account, accountInfo, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Account, accountInfo, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Account, accountInfo, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Account, accountInfo, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"Account, accountInfo, identityId field is present\"]= responseBody.has(\"identityId\");",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}account",
							"host": [
								"{{url}}account"
							]
						}
					},
					"response": []
				},
				{
					"name": "resetPSWD",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fe994a1-8311-42a5-aa20-8a2a7e6190cb",
								"type": "text/javascript",
								"exec": [
									"tests[\"Account, resetPSWD, Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}account/reset-password",
							"host": [
								"{{url}}account"
							],
							"path": [
								"reset-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "createUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59b3e514-1c68-4189-9640-08b364fc0e77",
								"type": "text/javascript",
								"exec": [
									" var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Users, createUser, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, createUser, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Users, createUser, Response has userID\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody);",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"postman.setEnvironmentVariable(\"new_user\", _str);",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf7e9cfd-e3cc-4dae-a5c1-1e4afd518219",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"email= 'chikalov.ilya+'+getRandomInt(1, 1000)+'@gmail.com'",
									"user= 'TestUser'+getRandomInt(1,1000)",
									"",
									"pm.environment.set(\"random_email\", email);",
									"pm.environment.set(\"random_user\", user);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{random_email}}\",\r\n  \"firstName\": \"{{random_user}}\",\r\n  \"lastName\": \"{{random_user}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00d5e8c0-85d7-4e08-90e3-a2622756882a",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"email\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": [ \"string\", \"null\" ]",
									"          },",
									"          \"firstName\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"lastName\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"email\",",
									"              \"name\",",
									"              \"firstName\",",
									"              \"lastName\"",
									"            ]",
									"    }",
									"}",
									"    ;",
									"",
									"tests[\"Users, getUsers, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Users, getUsers, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, getUsers, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Users, getUsers, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Users, getUsers, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Users, getUsers, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"",
									"postman.setEnvironmentVariable(\"user_email\", jsonData[0].email);",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserWithID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93346cc4-466f-492e-ab64-cd1a37f98762",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"email\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"email\",",
									"              \"name\"",
									"            ]",
									"    ",
									"}",
									"    ;",
									"",
									"tests[\"Users, getUserWithID, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Users, getUserWithID, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, getUserWithID, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Users, getUserWithID, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Users, getUserWithID, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Users, getUserWithID, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"//console.log(\"Validation failed: \", tv4.error);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserMemberOf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de2154ee-4ccd-4f87-815e-64d1e9fd84b4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"email\": {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": {",
									"            \"type\": \"string\"",
									"          }",
									"        },",
									"          \"required\": [",
									"              \"id\",",
									"              \"email\",",
									"              \"name\"",
									"            ]",
									"    ",
									"}",
									"    ;",
									"",
									"tests[\"Users, getUserMemberOf, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"Users, getUserMemberOf, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"Users, getUserMemberOf, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Users, getUserMemberOf, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"Users, getUserMemberOf, Email field is present\"]= responseBody.has(\"email\");",
									"tests[\"Users, getUserMemberOf, Name field is present\"]= responseBody.has(\"name\");",
									"",
									"//console.log(\"Validation failed: \", tv4.error);",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserGroup",
			"item": [
				{
					"name": "createGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dfecaae-225e-475a-b973-b8bd786b05c2",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"UserGroup, createGroup, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"UserGroup, createGroup, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"UserGroup, createGroup, Response has userGroupID\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody);",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"tests[_str]=1;",
									"",
									"pm.environment.set(\"new_user_group_id1\", _str);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a6278341-72bb-4026-a965-76150c273193",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestGroup+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_user_group1\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{random_user_group1}}\"\n"
						},
						"url": {
							"raw": "{{url}}user-groups",
							"host": [
								"{{url}}user-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "createGroup2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4d4ca57-91ef-4637-b36e-a73edd9f1b64",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"UserGroup, createGroup2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"UserGroup, createGroup2, Status code is 201\"] = responseCode.code === 201;",
									"tests[\"UserGroup, createGroup2, Response has userGroupID\"]= /\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/.test(responseBody);",
									"",
									"var _str = responseBody.match(/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}/i);",
									"tests[_str]=1;",
									"",
									"pm.environment.set(\"new_user_group_id2\", _str);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e507fd69-f45a-4b0c-9e48-10a48862b4f5",
								"type": "text/javascript",
								"exec": [
									"var min",
									"var max",
									"function getRandomInt(min, max)",
									"{",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"test= 'TestGroup+'+getRandomInt(1, 1000)",
									"",
									"pm.environment.set(\"random_user_group2\", test);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{random_user_group2}}\"\n"
						},
						"url": {
							"raw": "{{url}}user-groups",
							"host": [
								"{{url}}user-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "addMemberToUserGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14c80e6e-5f64-4313-b937-83b692c97c8b",
								"type": "text/javascript",
								"exec": [
									"tests[\"UserGroup, addMemberToUserGroup, Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id1}}/members/{{new_user}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id1}}",
								"members",
								"{{new_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListOfUserGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "750e7332-f958-4411-97f5-f2e5536b2b64",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"   \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"usersCount\": ",
									"          {",
									"            \"type\": \"number\"",
									"          },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"    \"usersCount\"",
									"]",
									"",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"UserGroup, ListOfUserGroups, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"UserGroup, ListOfUserGroups, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"UserGroup, ListOfUserGroups, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"UserGroup, ListOfUserGroups, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"UserGroup, ListOfUserGroups, Name field is present\"]= responseBody.has(\"name\");",
									"tests[\"UserGroup, ListOfUserGroups, usersCount field is present\"]= responseBody.has(\"usersCount\");",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups",
							"host": [
								"{{url}}user-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "userGroupID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48878fa4-9390-4bee-b001-244412af59f4",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = ",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"id\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"          \"name\": ",
									"          {",
									"            \"type\": \"string\"",
									"          },",
									"\"required\":",
									"[",
									"    \"id\",",
									"    \"name\",",
									"]",
									"",
									"        }  ",
									"    }",
									"};",
									"",
									"tests[\"UserGroup, userGroupID, Is Json  valid\"] = tv4.validate( jsonData, schema);",
									"tests[\"UserGroup, userGroupID, Status code is 200\"] = responseCode.code === 200;",
									"tests[\"UserGroup, userGroupID, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"UserGroup, userGroupID, ID field is present\"]= responseBody.has(\"id\");",
									"tests[\"UserGroup, userGroupID, Name field is present\"]= responseBody.has(\"name\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id2}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteMemberFromUserGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3ef8a3c-f9a7-487a-b6db-52fba46bc706",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"UserGroup, deleteMemberFromUserGroup, Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id1}}/members/{{new_user}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id1}}",
								"members",
								"{{new_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dc8062d-8c90-4588-af3a-1518a9fc6c05",
								"type": "text/javascript",
								"exec": [
									"tests[\"UserGroup, deleteGroup, Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}user-groups/{{new_user_group_id1}}",
							"host": [
								"{{url}}user-groups"
							],
							"path": [
								"{{new_user_group_id1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteSubLocation2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc4faa12-ec09-4049-a6a9-fa37d00729a3",
								"type": "text/javascript",
								"exec": [
									"tests[\"UserGroup, deleteSubLocation2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"UserGroup, deleteSubLocation2, Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_sublocation_id}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_sublocation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteLocation2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a60d3732-ec05-41e4-90ef-d4a11b476f66",
								"type": "text/javascript",
								"exec": [
									"tests[\"UserGroup, deleteLocation2, Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
									"tests[\"UserGroup, deleteLocation2, Status code is 204\"] = responseCode.code === 204;",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}locations/{{new_location_id}}",
							"host": [
								"{{url}}locations"
							],
							"path": [
								"{{new_location_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	}
}